Higher-Order Functions in Go
1 June 2017
Tags: go functional

Stefan Hans
Go Rookie and Native Speaker Wannabe
contact@stefan-hans.de
https://github.com/stefanhans/go-present/

* A Little Theory at First

- functions as first-class citizens, i.e. as types
- anonymous functions, function literals, and closures
- functional and pure functional programming
- state
- tail recursion
- monads
- abstract data types defined by functions (Hindleyâ€“Milner)

.image images/academic_gopher.png

* Higher-Order Functions in Go

The Go Programming Language does *not* contain higher-order functions like map, filter or fold.

.image images/gopher-talks.png

_"If_a_language_has_too_many_features,_you_waste_time_choosing_which_ones_to_use._
_Then_implement,_refine,_possibly_rethink_and_redo."_

Rob Pike, _Simplicity_is_Complicated_

* Generics in Go

The Go Programming Language does *not* support generics. No sufficient compiler approach was found yet.

.image images/project.png

_"The_generic_dilemma_is_this:_do_you_want_slow_programmers,_slow_compilers_and_bloated_binaries,_or_slow_execution_times?"_

Russ Cox, _The_Generic_Dilemma_

.link https://docs.google.com/document/d/1V03LUfjSADDooDMhe-_K59EgpTEm3V8uvQRuNMAEnjg/edit Go generate: A Proposal

* Tail Recursion

The Go Programming Language is *not* optimized for tail recursion.

.image images/pkg.png

* Anonymous Functions, Function Literals, Closures (1/2)
Anonymous functions have no name.
A function literal is a notation of a function type.

What is this? Does it compile? How could you extend it?
.play -edit closure1_1.go /CLOSURESTART/,/CLOSURE END/
Does that compile? If not, why?
.play -edit closure1_2.go /CLOSURESTART/,/CLOSURE END/
What is *function*myf* syntactically? Can you fix it if needed?
.play -edit closure1_3.go /CLOSURESTART/,/CLOSURE END/

* Anonymous Functions, Function Literals, Closures (2/2)
Closures are functions which can see their environment, i.e. next outer scope.

.play -edit closure2.go /CLOSURESTART/,/CLOSURE END/

Scope, function arguments and goroutines
.play -edit closure3.go /CLOSURESTART/,/CLOSURE END/

Actually, anonymous functions, function literals, and closures are the same things.

* Function Composition (1/2)

.code -edit compose1.go /func Compose/,/^}/

.play -edit compose1.go /func main/,/^}/

This composition evaluates its functions from right to left.

* Function Composition (2/2)

.code -edit compose2.go /COMPOSE START/,/COMPOSE END/

.play -edit compose2.go /func main/,/^}/

Variadic functions allow an "endless composition" of functions.

* Simple Map Function (1/2)

.code map.go /START/,/END/

Reference pointer of slices makes no sense as pass-by-reference parameters
because slices are handled as pass-by-reference parameters automatically.

.link https://dave.cheney.net/2017/04/29/there-is-no-pass-by-reference-in-go There is no pass-by-reference in Go (article by Dave Cheney)

* Simple Map Function (2/2)

.play -edit map.go /func main/,/^}/


* Simple Filter Function (1/2)

.code filter.go /START/,/END/

* Simple Filter Function (2/2)

.play -edit filter.go /func main/,/^}/

* Currying Function

.play -edit currying.go /func main/,/^}/

* Fold Function Approach

.play -edit fold_approach.go /START/,/END/

* Monads (simplified)

A data type with a function following two rules being those:

- neutral element
	f(n, x) = x

- associative function
	f(f(x, y), z) = f(x, f(y, z))

Associativity is not commutativity. The string concatenation and the product of square matrices are examples.


* Fold Function With Monads (1/2)

.code monad.go /START/,/END/

* Fold Function With Monads (2/2)

.play -edit monad.go /func main/,/^}/

Why should the function be associative?

* Simple High-Order Function As Reference Method

.code ref_map.go /Map/,/^}/

.play -edit ref_map.go /func main/,/^}/

* Parallel High-Order Function As Reference Method (1/2)
Helper function

.code par_ref_map.go /chanMap/,/^}/

Exported function

.code par_ref_map.go /ParMap/,/^}/

* Parallel High-Order Function As Reference Method (2/2)

.play -edit par_ref_map.go /func main/,/^}/


* Parallel High-Order Function With Internal Reference Method (1/2)

Using chanMap as helper function on an internal copy

.code pmap.go /ParMap/,/^}/

* Parallel High-Order Function With Internal Reference Method (2/2)

.play -edit pmap.go /func main/,/^}/

* Lazy Lists Defined by Function (1/3)

.code lazy_list.go /FloatMonad/,/^}/

.code lazy_list.go /LazyListOfFloat/,/^}/

* Lazy Lists Defined by Function (2/3)

.code lazy_list.go /Next/,/^}/

.code lazy_list.go /Get/,/^}/

* Lazy Lists Defined by Function (3/3)

.play -edit lazy_list.go /func main/,/^}/

* Discussion: High-Order Functions in Distributed Systems

.image images/project.png

- RPC
- Map/Reduce Model
- Monads
- Pipelines
- ...

* Links
dotGo 2015 - Francesc Campoy Flores - Functional Go?
.link https://www.youtube.com/watch?v=ouyHp2nJl0I&t=118s https://www.youtube.com/watch?v=ouyHp2nJl0I&t=118s
A concurrent prime sieve (The Go Playground)
.link https://play.golang.org/p/9U22NfrXeq https://play.golang.org/p/9U22NfrXeq
Go Concurrency Patterns: Pipelines and cancellation
.link https://blog.golang.org/pipelines
