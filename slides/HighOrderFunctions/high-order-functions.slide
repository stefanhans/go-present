Higher-Order Functions in Go
1 June 2017
Tags: go functional

Stefan Hans
Go Rookie and Native Speaker Wannabe
contact@stefan-hans.de
https://github.com/stefanhans/go-present/

* A Little Theory at First

- functions as first-class types
- anonymous functions, function literals, and closures
- higher-order functions
- state or mutability and immutability
- functional and pure functional programming
- recursion and tail recursion
- monads

.image images/academic_gopher.png

* Higher-Order Functions in Go

*Neither* the Go Programming Language *nor* the Standard Library contains higher-order functions like map, filter or fold.

.image images/gopher-talks.png

_"If_a_language_has_too_many_features,_you_waste_time_choosing_which_ones_to_use._
_Then_implement,_refine,_possibly_rethink_and_redo."_

Rob Pike, _Simplicity_is_Complicated_

* Generics in Go

The Go Programming Language does *not* support generics. No sufficient compiler approach was found yet.

_"The_generic_dilemma_is_this:_do_you_want_slow_programmers,_slow_compilers_and_bloated_binaries,_or_slow_execution_times?"_

Russ Cox, _The_Generic_Dilemma_

.image images/project.png

.link https://docs.google.com/document/d/1V03LUfjSADDooDMhe-_K59EgpTEm3V8uvQRuNMAEnjg/edit Go generate: A Proposal

* Tail Recursion in Go

The Go Programming Language is *not* optimized for tail recursion.

.image images/pkg.png

.link https://www.youtube.com/watch?v=ouyHp2nJl0I&t=118s dotGo 2015 - Francesc Campoy Flores - Functional Go?

* Anonymous Functions, Function Literals, Closures (1/2)
Anonymous functions have no name.
A function literal is a notation of a function type.

What is this? Does it compile? How could you extend it?
.play -edit closure1_1.go /CLOSURESTART/,/CLOSURE END/
Does that compile? If not, why?
.play -edit closure1_2.go /CLOSURESTART/,/CLOSURE END/
What is *function*myf* syntactically? Can you fix it if needed?
.play -edit closure1_3.go /CLOSURESTART/,/CLOSURE END/

* Anonymous Functions, Function Literals, Closures (2/2)
Closures are functions which can see their environment, i.e. next outer scope.

.play -edit closure2.go /CLOSURESTART/,/CLOSURE END/

Scope, function arguments and goroutines
.play -edit closure3.go /CLOSURESTART/,/CLOSURE END/

* Simple Map Function (1/2)

.code map.go /START/,/END/

Is this functional or pure functional? Is it mutable or immutable?

* Simple Map Function (2/2)

#.play -edit map.go /func main/,/^}/
.play -edit map.go /MUTABLE MAP START/,/MUTABLE MAP END/

Reference pointer of slices makes no sense as pass-by-reference parameters
because slices are handled as pass-by-reference parameters automatically.

.link https://dave.cheney.net/2017/04/29/there-is-no-pass-by-reference-in-go There is no pass-by-reference in Go (article by Dave Cheney)


* Simple Filter Function (1/2)

.code filter.go /START/,/END/

* Simple Filter Function (2/2)

.play -edit filter.go /func main/,/^}/

* Currying Function

.play -edit currying.go /func main/,/^}/

* Fold Function Approach

.play -edit fold_approach.go /START/,/END/

* Monads (simplified)

A data type wrapped around a function following two rules:

- neutral element
	f(n, x) = x

- associative function
	f(f(x, y), z) = f(x, f(y, z))

Associativity is not commutativity. The string concatenation and the product of square matrices are examples.


* Fold Function With Monads (1/2)

.code monad.go /START/,/END/

* Fold Function With Monads (2/2)

.play -edit monad.go /func main/,/^}/

Why should the function be associative?

* To be continued...

*Advanced*High-Order*Functions*

- parallel algorithm
- advanced high-order functions
- function as receiver type
- function composition
- abstract data types defined by functions (Hindleyâ€“Milner)
- lazy lists

.image images/academic_gopher.png

* To be continued...

*Functional*Streamings*

- pipelines
- fan-in and fan-out pattern
- cancellation
- channels as sieves
- channels building high-order functions

.image images/project.png