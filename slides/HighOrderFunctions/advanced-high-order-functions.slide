Advanced Higher-Order Functions in Go
28 August 2017
Tags: go functional

Stefan Hans
Go Rookie and Native Speaker Wannabe
contact@stefan-hans.de
https://github.com/stefanhans/go-present/

* A Little Theory at First

- functional programming in Go
- monads
- immutable state
- parallelism
- structs implementing interfaces
- abstract data types defined by functions (Hindleyâ€“Milner)

.image images/academic_gopher.png

* Higher-Order Functions in Go

*Neither* the Go Programming Language *nor* the Standard Library contains higher-order functions like map, filter or fold.

.image images/gopher-talks.png

_"If_a_language_has_too_many_features,_you_waste_time_choosing_which_ones_to_use._
_Then_implement,_refine,_possibly_rethink_and_redo."_

Rob Pike, _Simplicity_is_Complicated_

* Generics in Go

The Go Programming Language does *not* support generics. No sufficient compiler approach was found yet.

_"The_generic_dilemma_is_this:_do_you_want_slow_programmers,_slow_compilers_and_bloated_binaries,_or_slow_execution_times?"_

Russ Cox, _The_Generic_Dilemma_

.image images/project.png

.link https://docs.google.com/document/d/1V03LUfjSADDooDMhe-_K59EgpTEm3V8uvQRuNMAEnjg/edit Go generate: A Proposal

* Tail Recursion in Go

The Go Programming Language is *not* optimized for tail recursion.

.image images/pkg.png

.link https://www.youtube.com/watch?v=ouyHp2nJl0I&t=118s dotGo 2015 - Francesc Campoy Flores - Functional Go?

* Monads (simplified)

A data type wrapped around a function following two rules:

- neutral element
	f(n, x) = x

- associative function
	f(f(x, y), z) = f(x, f(y, z))

Associativity is not commutativity. The string concatenation and the product of square matrices are examples.


* Fold Function With Monads (1/2)

.code monad.go /START/,/END/

* Fold Function With Monads (2/2)

.play -edit monad.go /func main/,/^}/

Why should the function be associative?

* Simple High-Order Function With Mutable State

.code ref_map.go /Map/,/^}/

.play -edit ref_map.go /func main/,/^}/

* Parallel High-Order Function With Mutable State (1/2)
Helper function

.code par_ref_map.go /chanMap/,/^}/

Exported function

.code par_ref_map.go /ParMap/,/^}/

* Parallel High-Order Function With Mutable State (2/2)

.play -edit par_ref_map.go /func main/,/^}/


* Parallel High-Order Function With Immutable State (1/2)

Using chanMap as helper function on an internal copy

.code pmap.go /ParMap/,/^}/

* Parallel High-Order Function With Immutable State (2/2)

.play -edit pmap.go /func main/,/^}/

* Simple Zip Function


.code zip.go /START/,/END/

.play -edit zip.go /func main/,/^}/



* Aspects of Higher-Order Functions

Dimensions

- Input and output data structures
- Function arguments and return values

Execution

- Parallelism
- State

Aspects related to parallelism

- Monad
- Join function

* Lazy Lists Defined by Function (1/3)

.code lazy_list.go /FloatDef/,/^}/

.code lazy_list.go /LazyListOfFloat/,/^}/

* Lazy Lists Defined by Function (2/3)

.code lazy_list.go /Next/,/^}/

.code lazy_list.go /Get/,/^}/

* Lazy Lists Defined by Function (3/3)

.play -edit lazy_list.go /func main/,/^}/

* Discussion: High-Order Functions in Distributed Systems

.image images/project.png

- Map/Reduce Model
- Monads
- Pipelines
- RPC
- ...

* Links
A concurrent prime sieve
.link https://play.golang.org/p/9U22NfrXeq https://play.golang.org/p/9U22NfrXeq
Go Concurrency Patterns: Pipelines and cancellation
.link https://blog.golang.org/pipelines
