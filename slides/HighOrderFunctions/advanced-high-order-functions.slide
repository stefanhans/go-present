Advanced Higher-Order Functions in Go
28 September 2017
Tags: go functional

Stefan Hans
Go Rookie and Native Speaker Wannabe
contact@stefan-hans.de
https://github.com/stefanhans/go-present/


* About Myself And Go

- research and development on cutting-edge technology for over two years now
- doing Go programmming since February 2017
- Go at the center of my way forward facing the changes of digitization yet to come
- expecting increasing demand for Go expertises in programming and ecosystem
- visioning a strategy towards a business model around Go experts
- talks on Go related topics is a part of this strategy

.image images/gopher-talks.png


* Higher-Order Functions With Data Structures

- map, filter, and fold as simple higher-order functions
- mutable and immutable data structures
- parallel execution by goroutines
- monads - a function type may be not enough
- zip and groupBy - more complex transformations
- monads and the empty interface - kind of generics in Go

.image images/academic_gopher.png


* Simple Map Function

.code adv_map.go /START/,/END/

.play -edit adv_map.go /func main/,/^}/


* Simple Filter Function

.code adv_filter.go /START/,/END/

.play -edit adv_filter.go /func main/,/^}/


* Simple Fold Function

.play -edit adv_fold.go /START/,/END/


* Higher-Order Function Chain

.play -edit adv_chain.go /func main/,/^}/

We can create now simple higher-order functions with immutable states and chain them together.

.image images/project.png


* Serial Map Function With Mutable State

.code adv_mutable_map.go /START/,/END/

.play -edit adv_mutable_map.go /func main/,/^}/


* Parallel Map Function With Mutable State (1/2)

Internal helper function

.code adv_par_mutable_map.go /chanMap/,/^}/

Exported function

.code adv_par_mutable_map.go /ParMap/,/^}/


* Parallel Map Function With Mutable State (2/2)

.play -edit adv_par_mutable_map.go /func main/,/^}/


* Parallel Map Function With Immutable State (1/2)

Using chanMap as helper function on an internal copy

.code adv_par_immutable_map.go /ParMap/,/^}/


* Parallel Map Function With Immutable State (2/2)

.play -edit adv_par_immutable_map.go /func main/,/^}/


* Monads (simplified)

A data type wrapped around a function following two rules:

- neutral element
	f(n, x) = x

- associative function
	f(f(x, y), z) = f(x, f(y, z))

Associativity is not commutativity. The string concatenation and the product of square matrices are examples.


* Fold Function With Monads (1/2)

.code adv_monad.go /START/,/END/

* Fold Function With Monads (2/2)

.play -edit adv_monad.go /func main/,/^}/

Why should the function be associative?

Exercise: Implement a Fold function with parallel execution using monads.


* Simple Zip Function

.code zip.go /START/,/END/

.play -edit zip.go /func main/,/^}/


* Simple GroupBy Function

.code group.go /START/,/END/

.play -edit group.go /func main/,/^}/


* Monads and Interfaces (1/3)

Slice of empty interfaces as generic list

.code stat_empty_interface_fold.go /START_IF/,/END_IF/

Monad struct for handling empty interfaces

.code stat_empty_interface_fold.go /START_IMPL/,/END_IMPL/

Generic Fold function

.code stat_empty_interface_fold.go /START_FOLD/,/END_FOLD/


* Monads and Interfaces (2/3)

.play -edit stat_empty_interface_fold.go /func main/,/^}/

All list elements and the parameters of the function signature has to be of the same type exactly.

This can be enhanced by type assertion and conversion within the Fold function.


* Monads and Interfaces (3/3)

.code dyn_empty_interface_fold.go /START_FOLD/,/END_FOLD/

.play -edit dyn_empty_interface_fold.go /func main/,/^}/


* Group Structs By Functions (1/3)

.code group_structs.go /DEF_START/,/DEF_END/


* Group Structs By Functions (2/3)

.code group_structs.go /STRUCT_START/,/STRUCT_END/


* Group Structs By Functions (3/3)

.play -edit group_structs.go /RUN_START/,/RUN_END/


* Aspects of Higher-Order Functions

dimensions

- input and output data structures
- function arguments and return values

execution

- parallelism
- state

monads

.image images/academic_gopher.png


* Nice for playing around, but...

- why not implementing the needed functionality straight away?

- why not using a database?

- what about data streams?

.image images/project.png


* Forecast

Let's see how we can use higher-order functions combined with Go's concurrency idioms. What about pipelines, fan-in, fan-out, and cancellations?

Planned Talk

- Principles of Functional Streaming

Ideas for Talks

- Functional Streaming in Distributed Systems

- Reactive Systems with Functional Streaming

- Functional Streaming and Machine Learning

.image images/pkg.png


