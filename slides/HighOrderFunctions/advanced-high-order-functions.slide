Advanced Higher-Order Functions in Go
28 August 2017
Tags: go functional

Stefan Hans
Go Rookie and Native Speaker Wannabe
contact@stefan-hans.de
https://github.com/stefanhans/go-present/

* A Little Theory at First

- monads
- immutable state
- parallelism
- monads of empty interfaces
- aspects of higher-order functions
- abstract data types defined by functions (Hindleyâ€“Milner)

.image images/academic_gopher.png

* Monads (simplified)

A data type wrapped around a function following two rules:

- neutral element
	f(n, x) = x

- associative function
	f(f(x, y), z) = f(x, f(y, z))

Associativity is not commutativity. The string concatenation and the product of square matrices are examples.


* Fold Function With Monads (1/2)

.code monad.go /START/,/END/

* Fold Function With Monads (2/2)

.play -edit monad.go /func main/,/^}/

Why should the function be associative?

* Simple High-Order Function With Mutable State

.code ref_map.go /Map/,/^}/

.play -edit ref_map.go /func main/,/^}/

* Parallel High-Order Function With Mutable State (1/2)
Helper function

.code par_ref_map.go /chanMap/,/^}/

Exported function

.code par_ref_map.go /ParMap/,/^}/

* Parallel High-Order Function With Mutable State (2/2)

.play -edit par_ref_map.go /func main/,/^}/


* Parallel High-Order Function With Immutable State (1/2)

Using chanMap as helper function on an internal copy

.code pmap.go /ParMap/,/^}/

* Parallel High-Order Function With Immutable State (2/2)

.play -edit pmap.go /func main/,/^}/

* Simple Zip Function


.code zip.go /START/,/END/

.play -edit zip.go /func main/,/^}/

* Monads and Interfaces (1/3)

Slice of empty interfaces as generic list type

.code staticEmptyInterfaceListFold.go /START_IF/,/END_IF/

Monad struct for handling empty interfaces

.code staticEmptyInterfaceListFold.go /START_IMPL/,/END_IMPL/

Generic Fold function

.code staticEmptyInterfaceListFold.go /START_FOLD/,/END_FOLD/

* Monads and Interfaces (2/3)

.play -edit staticEmptyInterfaceListFold.go /func main/,/^}/

* Monads and Interfaces (3/3)

.code dynamicEmptyInterfaceListFold.go /START_FOLD/,/END_FOLD/

.play -edit dynamicEmptyInterfaceListFold.go /func main/,/^}/


* Aspects of Higher-Order Functions

Dimensions

- Input and output data structures
- Function arguments and return values

Execution

- Parallelism
- State

Aspects related to parallelism

- Monad
- Join function

* Lazy Lists Defined by Function (1/3)

.code lazy_list.go /FloatDef/,/^}/

.code lazy_list.go /LazyListOfFloat/,/^}/

* Lazy Lists Defined by Function (2/3)

.code lazy_list.go /Next/,/^}/

.code lazy_list.go /Get/,/^}/

* Lazy Lists Defined by Function (3/3)

.play -edit lazy_list.go /func main/,/^}/
