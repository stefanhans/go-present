K8s API & Go Programming
My First Steps with Kubernetes and client-go
24 Jan 2018
Tags: go k8s

Stefan Hans
Go Rookie and Native Speaker Wannabe
contact@stefan-hans.de
https://github.com/stefanhans/Go4k8s


* About myself

- working in IT since the late-Nineties, mostly as supporter (who can code)
- doing my kind of 'research and development' of cutting-edge technology for over two years now
- doing Go programming since February 2017
- exploring Kubernetes since 6 weeks
- playing with client-go since 10 days
- going to cooperate with [[https://www.loodse.com/][Loodse]]
.image images/loodse.svg


* What we will focus on, finally

.link https://github.com/kubernetes/client-go kubernetes/client-go
.image images/k8s.png
.image images/gopher.jpg

.caption _All_Gophers_ by [[https://www.instagram.com/reneefrench/][Ren√©e French]]


* Offers to start with Kubernetes for free

- MOOCs
.link https://www.coursera.org/learn/google-kubernetes-engine Getting Started with Google Kubernetes Engine (by Coursera)
.link https://www.udacity.com/course/scalable-microservices-with-kubernetes--ud615 Scalable Microservices with Kubernetes (by Udacity)

- YouTube
.link https://www.youtube.com/user/janakirammsv Janakiram & Associates
.link https://www.youtube.com/watch?v=9YYeE-bMWv8&list=PLvmPtYZtoXOENHJiAQc6HmV2jmuexKfrJ TGI Kubernetes

- Environments
.link https://cloud.google.com/kubernetes-engine/ Google Kubernetes Engine
.link https://kubernetes.io/docs/getting-started-guides/minikube/ minikube
.link https://github.com/kelseyhightower/kubernetes-the-hard-way Kubernetes The Hard Way


* Main references - imperative, declarative, and programmatic

- Kubernetes

.link https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands Kubectl Reference Docs
.link https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.9/ Kubernetes API Reference Docs
.link https://godoc.org/k8s.io/client-go GoDoc 'client-go'

- Golang

.link https://golang.org/ref/spec The Go Programming Language Specification
.link https://golang.org/pkg/ Go Packages

- Docker

.link https://docs.docker.com/engine/reference/builder/ Dockerfile reference
.link https://docs.docker.com/engine/reference/commandline/cli/ Use the Docker command line


* Get hands dirty

- Installations

.link https://kubernetes.io/docs/tasks/tools/install-minikube/ Install Minikube
.link https://golang.org/dl/ The Go Programming Language
.link https://github.com/kubernetes/client-go/blob/master/INSTALL.md Installing client-go
.link https://www.jetbrains.com/go/download/#section=linux Download GoLand (free 30-day trial)


- Client-go from outside and from inside of the cluster

.link https://raw.githubusercontent.com/kubernetes/client-go/master/examples/out-of-cluster-client-configuration/main.go Example from outside with BuildConfigFromFlags()
.link https://raw.githubusercontent.com/kubernetes/client-go/master/examples/in-cluster-client-configuration/main.go Example from inside with InClusterConfig()

* Get an idea by example (1)

.link https://raw.githubusercontent.com/kubernetes/client-go/v6.0.0/examples/create-update-delete-deployment/main.go Create, get, update, delete a Deployment resource

- Context ("k8s.io/client-go/tools/clientcmd")
    config, err := clientcmd.BuildConfigFromFlags("", "/home/stefan/.kube/config")

- Clientset ("k8s.io/client-go/kubernetes")
    clientset, err := kubernetes.NewForConfig(config)

- Client for deployments (apiv1 "k8s.io/api/core/v1")
    deploymentsClient := clientset.AppsV1beta1().Deployments(apiv1.NamespaceDefault)

- Define deployment (metav1 "k8s.io/apimachinery/pkg/apis/meta/v1")
    deployment := &appsv1beta1.Deployment{
    	ObjectMeta: metav1.ObjectMeta{...},
    	Spec: appsv1beta1.DeploymentSpec{...},
    }


* Get an idea by example (2)

- Create deployment
    resultDeployment, err := deploymentsClient.Create(deployment)

.image images/project.png


* Resource definitions and what to do with them

- Resource 'Deployment' - top level of the hierarchy
    type Deployment struct {
        metav1.TypeMeta `json:",inline"`
        metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
        Spec DeploymentSpec `json:"spec,omitempty" protobuf:"bytes,2,opt,name=spec"`
        Status DeploymentStatus `json:"status,omitempty" protobuf:"bytes,3,opt,name=status"`
    }

- Interface for deployments
    type DeploymentInterface interface {
    	Create(*v1beta1.Deployment) (*v1beta1.Deployment, error)
    	Update(*v1beta1.Deployment) (*v1beta1.Deployment, error)
    	UpdateStatus(*v1beta1.Deployment) (*v1beta1.Deployment, error)
    	Delete(name string, options *v1.DeleteOptions) error
    	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
    	Get(name string, options v1.GetOptions) (*v1beta1.Deployment, error)
    	List(opts v1.ListOptions) (*v1beta1.DeploymentList, error)
    	Watch(opts v1.ListOptions) (watch.Interface, error)
    	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.Deployment, err error)
    	DeploymentExpansion
    }


* Structs and Interfaces - first glance of the filesystem structure

- type ... struct
    find k8s.io/api -name types.go
    find k8s.io/api -name types.go -exec grep struct {} \; | egrep '^type'

- e.g. search 'Service' struct
    find k8s.io/api -name types.go -exec grep -l "type Service struct" {} \;
    k8s.io/api/core/v1/types.go


- type ... interface
    find k8s.io/client-go -name '*.go' -exec egrep -l '^type [[:alnum:]]+Interface interface' {} \;
    find k8s.io/client-go -name '*.go' -exec egrep '^type [[:alnum:]]+Interface interface' {} \;

- e.g. search 'Service' interface
    find k8s.io/client-go -name '*.go' -exec grep -l "type ServiceInterface interface" {} \;
    k8s.io/client-go/kubernetes/typed/core/v1/service.go


* What I wanna show

- A simple deployment of "Hello World" - with a little surprise, at least for me

- A more playful deployment providing a webpage - showing some howtos

.image images/project.png

- A minimalistic CI/CD approach

Deployment for testing in Docker container:

_Fetch_source_code_from_GitHub,_check,_build_and_run_for_verification_

Blue-Green Deployment with Go:

_Start_staging_deployment,_verify,_change_services_and_deployment,_and_delete_staging_deployment_


* Now pray to the live demo gods

.image images/biggerProject.jpeg