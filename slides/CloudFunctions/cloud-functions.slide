Google Cloud Functions for Go
From a Playing Alpha Tester ¯\_(ツ)_/¯
13 Dec 2018
Tags: go gcp cloudfunctions

Stefan Hans
Go Developer and Cloud-Native Engineer
stefanhans65@gmail.com
https://github.com/stefanhans/go-present/
@stefanhans65


* About Myself, Go, and Cloud Functions

- doing my kind of 'research and development' of cutting-edge technology for over four years now
- doing Go programming since February 2017
- using Go professionally in the cloud domain (k8s)
- working on my thesis "Programming Reactive Systems in Go"
- talks on topics related to Go, cloud-native, serverless, and beyond
- fiddling around with this for about two weeks now

.image images/gopher-talks.png


* Agenda

- Preparations
- Hello World
- Dependencies
- Registration service
- Demo time
- The good, the bad and the ugly
- What's next?

.image images/project.png


* Preparations

.link https://cloud.google.com/free/ Google Cloud Platform Free Tier
.link https://golang.org/doc/install Getting Started - The Go Programming Language
.link https://docs.google.com/forms/d/e/1FAIpQLSfJ08R2z7FumQyYGGuTyK4x5M-6ch7WmJ_3uWYI5SdZUb5SBw/viewform Apply for Early Access
.link https://cloud.google.com/functions/docs/quickstarts Quickstarts: gcloud CLI or Console

*and*more*

.link https://cloud.google.com/functions/ Google Cloud Functions
.link https://cloud.google.com/go/docs/ Go on Google Cloud Platform
.link https://firebase.google.com/docs/firestore/ Google Cloud Firestore


* Overview

Execution Environment

- Node.js v6.14.0 (GA) and Node.js v8.11.1 (Beta)
- Python 3.7.1 (Beta)
- Go 1.11 (Alpha)

Triggers

- HTTP
- gcloud
- GCP Pub/Sub
- GCP Storage
- GCP Firebase/Firestore
- GCP Scheduler, Stackdriver, Compute Engine, BigQuery, ...


* Hello World

Define the function with fixed input parameters signature - *no* "package main" ☝️

.code functions/functions.go /HELLOWORLD_START/,/HELLOWORLD_END/

Prepare and deploy the function

    GCP_PROJECT="gke-serverless-211907"
    GOOGLE_APPLICATION_CREDENTIALS="/Users/stefan/.secret/gke-serverless-211907-181ed186fa7f.json"

.play helloworld_1.go /START/,/END/

Use the function via HTTP

.play helloworld_2.go /START/,/END/

or via CLI

.play helloworld_3.go /START/,/END/


* Dependencies

Functions with dependencies need Go modules

    GO111MODULE=on
    go mod init && go mod vendor

to be vendored

    ├── go.mod
    ├── go.sum
    ├── functions.go
    ├── ...
    └── vendor
        ├── ...
        └── modules.txt

.image images/academic-gopher.png


* Registration Service (1/3)

- JSON as encoding format
- Cloud Firestore (Beta), a real-time document database for storage
- Only subscribe() and unsubscribe() needed
- Additional functions for convenience

.image images/run.png

* Registration Service (2/3)

The struct

    // IpAddress is the struct for the collection
    type IpAddress struct {
        Name     string `firestore:"name,omitempty"`
        Ip       string `firestore:"ip,omitempty"`
        Port     string `firestore:"port,omitempty"`
        Protocol string `firestore:"protocol,omitempty"` // "tcp" or "udp"
    }

and the functions which are expecting a string of words


    // Subscribe gets information of the new member via HTTP, stores it in Firestore
    // and responds with the list of all members
    func Subscribe(w http.ResponseWriter, r *http.Request)

    // Unsubscribe deletes the member specified by UUID in Firestore
    func Unsubscribe(w http.ResponseWriter, r *http.Request)


are "as simple as possible but not simpler" ✊

* Registration Service (2/3)

Read the body and create a struct out of the body (except first word, i.e. UUID)

	body, err := ioutil.ReadAll(r.Body)

	ipAddress := &IpAddress{
		Name:     strings.Split(string(body), " ")[1],
		Ip:       strings.Split(string(body), " ")[2],
		Port:     strings.Split(string(body), " ")[3],
		Protocol: strings.Split(string(body), " ")[4],
	}

Marshall the struct to JSON

	ipAddressJson, err := json.MarshalIndent(ipAddress, "", "  ")

and save it as string in a document named by the UUID

    client.Collection(collectionName).Doc(strings.Split(string(body), " ")[0])
        .Set(ctx, map[string]interface{}{
        strings.Split(string(body), " ")[0]: fmt.Sprintf("%v", string(ipAddressJson)),
    })


* Registration Service (2/3)

Get all IP addresses from documents,

    // Map of IpAddress
    var ipAdresses map[string]IpAddress = make(map[string]IpAddress)

    // Get iterator over the documents and members, respectively
    iter := client.Collection(collectionName).Documents(ctx)
    for {
        if doc, err := iter.Next(); err == iterator.Done { break }

        // Get the JSON string, unmarshall it, and insert it into the map
        if v, ok := doc.Data()[doc.Ref.ID].(string); ok {
            json.Unmarshal([]byte(v), &ipAddr)
        }
        ipAdresses[doc.Ref.ID] = ipAddr
    }

marshall to JSON and send back

	ipAddressesJson, err := json.Marshal(ipAdresses)

	fmt.Fprintf(w, "%v", string(ipAddressesJson))

* Now it's demo time ...

.image images/project.png


* The Good,

- free (2 million invocations per month, ...)
- available online
- additional services


*the*Bad,*

- redundancy-independency contradiction


*and*the*Ugly*

- deployment performance (no emulator for GO) and debugging, i.e. "no details available"

.image images/gopher-talks.png


* What's next?

.link https://cloud.google.com/functions/docs/deploying/repo Deploying from Source Control


*and*more*

.link https://cloud.google.com/solutions/using-gcp-services-from-gke Using Google Cloud Platform Services from Google Kubernetes Engine
.link https://github.com/GoogleCloudPlatform/golang-samples Google Cloud Platform Go Samples

.image images/project.png
