Core Functional Streaming in Go
Functions and Go's CSP Model Controlling Data Streams
20 Nov 2017
Tags: go functional streams

Stefan Hans
Go Rookie and Native Speaker Wannabe
contact@stefan-hans.de
https://github.com/stefanhans/go-present/


* About Myself And Go

- doing my kind of 'research and development' of cutting-edge technology for over two years now
- doing Go programming since February 2017
- expecting increasing demand for Go expertise in programming and ecosystem
- visioning a strategy towards a business model around Go experts
- talks on Go related topics are a part of this strategy

.image images/gopher-talks.png


* Agenda

- introducing the core principles
- building simple streams
- collect and distribute (pub/sub)
- distribute between two
- distribute between many
- buffer and flush
- fold and aggregate
- convert data types statically

Is that enough?

- meta channel, orchestration and container, registration and configuration, and APIs


* The core principles of 'Functional Streaming' (as I mean it)

- node-like structs with one main loop goroutine connected via edge-like channels are the basic components handling data streams
- functions called in the main loop control or transform the data streams
- crucial parts of structs and main loops, respectively, can be exchanged during flowing data streams
- exchange of meta information and reactions to it

.image images/project.png

Let's see what can we achieve with the first three ideas for a start.


* Host, Node, Peer (1/3)

.play -edit host.go /START_1/,/END_1/

* Host, Node, Peer (2/3)

.play -edit host.go /START_2/,/END_2/


* Host, Node, Peer (3/3)

.play -edit host.go /START_1/,/END_1/


* Convert Statically (3/3)

.play -edit host.go /func main/,/^}/


* Discussion: Makes this sense? What's next?

- meta channels can be used for controlling
- orchestration and container - like k8s with docker and/or in docker images
- dynamic registration of functions and nodes
- declarative configuration can be used avoid deadlocks etc.
- gRPC with protobuf
- APIs: CLI, JSON/YAML, GUI
- context, interfaces, generics-like ...

.image images/project.png
