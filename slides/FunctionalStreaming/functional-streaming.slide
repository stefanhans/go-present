Core Functional Streaming in Go
Functions and Go's CSP Model Controlling Data Streams
20 Nov 2017
Tags: go functional streams

Stefan Hans
Go Rookie and Native Speaker Wannabe
contact@stefan-hans.de
https://github.com/stefanhans/go-present/


* About Myself And Go

- doing my kind of 'research and development' of cutting-edge technology for over two years now
- doing Go programming since February 2017
- expecting increasing demand for Go expertise in programming and ecosystem
- visioning a strategy towards a business model around Go experts
- talks on Go related topics are a part of this strategy

.image images/gopher-talks.png


* Agenda

- introducing the core principles
- building simple streams
- collect and distribute (pub/sub)
- distribute between two
- distribute between many
- buffer and flush
- fold and aggregate
- convert data types statically

Is that enough?

- meta channel, orchestration and container, registration and configuration, and APIs


* The core principles of 'Functional Streaming' (as I mean it)

- node-like structs with one main loop goroutine connected via edge-like channels are the basic components handling data streams
- functions called in the main loop control or transform the data streams
- crucial parts of structs and main loops, respectively, can be exchanged during flowing data streams
- exchange of meta information and reactions to it

.image images/project.png

Let's see what can we achieve with the first three ideas for a start.


* Building Streams (1/4)

.code sn_connect.go /START_1/,/END_1/
.code sn_connect.go /START_2/,/END_2/


* Building Streams (2/4)

.play -edit sn_connect.go /func main/,/^}/

Best to avoid deadlocks is to implement in the following order:

1st: finish node creation
2nd: finish stream configuration
3rd: start sending data
4th: change function via channel (optional)


* Building Streams (3/4)

Declare and initialize a new node
.code sn_connect.go /START_3/,/END_3/

Connects the output of one node with the input of another
.code sn_connect.go /START_5/,/END_5/


* Building Streams (4/4)

Helper function to show output
.code sn_connect.go /START_PRINTF/,/END_PRINTF/

Helper function to produce input
.code sn_connect.go /START_ProduceAtMs/,/END_ProduceAtMs/

Exchange the function of a node
.code sn_connect.go /START_NODE_SETFUNC/,/END_NODE_SETFUNC/


* Higher-Order Function Map

.code sn_map.go /START_MAP/,/END_MAP/
.play -edit sn_map.go /func main/,/^}/

The node which is following *node_1* is anonymous and not accessible


* Collect Streams

Collecting streams is easy
.play -edit sn_collector.go /func main/,/^}/


* Distribute Streams (1/5)

Distributing streams is more sophisticated
.code sn_distributor.go /START_SUBSCRIPTION/,/END_SUBSCRIPTION/
Subscriptions are introduced, and handled by distributor nodes
.code sn_distributor.go /START_DistributorOfInt_1/,/END_DistributorOfInt_1/


* Distribute Streams (2/5)

.code sn_distributor.go /START_DistributorOfInt_2/,/END_DistributorOfInt_2/


* Distribute Streams (3/5)

.code sn_distributor.go /START_DistributorOfInt_3/,/END_DistributorOfInt_3/


* Distribute Streams (4/5)
Connect a distributor to a node
.code sn_distributor.go /START_CONNECTD/,/END_CONNECTD/
Subscribe to and unsubscribe from a distributor
.code sn_distributor.go /START_SUBSCRIBE/,/END_SUBSCRIBE/


* Distribute Streams (5/5)

.play -edit sn_distributor.go /START_6/,/END_6/


* Tee Streams (1/2)

.code sn_tee.go /START_TEE/,/END_TEE/

* Tee Streams (2/2)

.play -edit sn_tee.go /func main/,/^}/


* Higher-Order Function Filter (1/2)

.code sn_filter.go /START_FILTER/,/END_FILTER/


* Higher-Order Function Filter (2/2)

.play -edit sn_filter.go /func main/,/^}/


* Switch Streams (1/2)

.code sn_switch.go /START_SWITCH/,/END_SWITCH/

* Switch Streams (2/2)

.play -edit sn_switch.go /func main/,/^}/


* Distributing Functions (1/2)

Distribute and copy to all subscribers
.code sn_distribute_functions.go /START_TOALL/,/END_TOALL/
Distribute round-robin
.code sn_distribute_functions.go /START_RR/,/END_RR/

* Distributing Functions (2/2)

.play -edit sn_distribute_functions.go /func main/,/^}/


* Buffer and Flush (1/5)

.code sn_buffer.go /START_BufferOfInt_1/,/END_BufferOfInt_1/
.code sn_buffer.go /START_BufferOfInt_3/,/END_BufferOfInt_3/


* Buffer and Flush (2/5)

.code sn_buffer.go /START_BufferOfInt_2/,/END_BufferOfInt_2/


* Buffer and Flush (3/5)
Values will be buffered and flushed
.code sn_buffer.go /START_BUFFER/,/END_BUFFER/
.code sn_buffer.go /START_FLUSH/,/END_FLUSH/
Set a control function using input, length, and capacity of the buffer
.code sn_buffer.go /START_FUNC/,/END_FUNC/


* Buffer and Flush (4/5)

.play -edit sn_buffer.go /func main/,/^}/


* Buffer and Flush (5/5)

.play -edit sn_buffer_func.go /func main/,/^}/


* Higher-Order Function Fold (1/3)

.code sn_folder.go /START_FolderOfInt_1/,/END_FolderOfInt_1/
.code sn_folder.go /START_FolderOfInt_3/,/END_FolderOfInt_/


* Higher-Order Function Fold (2/3)

.code sn_folder.go /START_MonadOfInt_1/,/END_MonadOfInt_1/
.code sn_folder.go /START_MonadOfInt_2/,/END_MonadOfInt_2/
.code sn_folder.go /START_FolderOfInt_2/,/END_FolderOfInt_2/


* Higher-Order Function Fold (3/3)

.code sn_folder.go /START_RESULT/,/END_RESULT/
.play -edit sn_folder.go /func main/,/^}/
Assigning another monad to variable used in *NewFolderOfInt* has no effect


* Aggregate (1/3)

.code sn_aggregator.go /START_AggregatorOfInt_1/,/END_AggregatorOfInt_1/
.code sn_aggregator.go /START_AggregatorOfInt_3/,/END_AggregatorOfInt_3/


* Aggregate (2/3)

.code sn_aggregator.go /START_AggregatorOfInt_2/,/END_AggregatorOfInt_2/
.code sn_aggregator.go /START_RESET/,/END_RESET/


* Aggregate (3/3)

.play -edit sn_aggregator.go /func main/,/^}/


* Convert Statically (1/3)

.code sn_converter_int_to_float.go /START_ConverterIntToFloat_1/,/END_ConverterIntToFloat_1/
.code sn_converter_int_to_float.go /START_ConverterIntToFloat_3/,/END_ConverterIntToFloat_3/


* Convert Statically (2/3)

.code sn_converter_int_to_float.go /START_ConverterIntToFloat_2/,/END_ConverterIntToFloat_2/
.code sn_converter_int_to_float.go /START_CONNECTCONVERTER/,/END_CONNECTCONVERTER/
.code sn_converter_int_to_float.go /START_CONNECT/,/END_CONNECT/


* Convert Statically (3/3)

.play -edit sn_converter_int_to_float.go /func main/,/^}/


* Discussion: Makes this sense? What's next?

- meta channels can be used for controlling
- orchestration and container - like k8s with docker and/or in docker images
- dynamic registration of functions and nodes
- declarative configuration can be used avoid deadlocks etc.
- gRPC with protobuf
- APIs: CLI, JSON/YAML, GUI
- context, interfaces, generics-like ...

.image images/project.png
